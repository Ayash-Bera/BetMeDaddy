{
  "address": "0x0eB956bECD4342a500931b5e8Ce803a518113838",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isYes",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        }
      ],
      "name": "MarketRecorded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReputation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReputation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "difficultyMultiplier",
          "type": "uint256"
        }
      ],
      "name": "ReputationUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "finalPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "outcome",
          "type": "bool"
        }
      ],
      "name": "calculateDifficultyMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateFeeDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateVotingWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "predictions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "correct",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isYes",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentPrice",
          "type": "uint256"
        }
      ],
      "name": "recordPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "removeFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "outcome",
          "type": "bool"
        }
      ],
      "name": "updateReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "name": "whitelistFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedFactories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x501fb24259d500f7a7287bc2c9fdee93f5f6c7a7efbd532168c6bfc6d2eaa2b0",
  "receipt": {
    "to": null,
    "from": "0xD38de898Df33FEc5E0e4cCe2a810DB284C0Cd820",
    "contractAddress": "0x0eB956bECD4342a500931b5e8Ce803a518113838",
    "transactionIndex": 90,
    "gasUsed": "751308",
    "logsBloom": "0x
    "blockHash": "0x46485c0a28834af861f418e803974a83ffdb6c8f1e7792bb9447cf60d7fbd108",
    "transactionHash": "0x501fb24259d500f7a7287bc2c9fdee93f5f6c7a7efbd532168c6bfc6d2eaa2b0",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 7232380,
        "transactionHash": "0x501fb24259d500f7a7287bc2c9fdee93f5f6c7a7efbd532168c6bfc6d2eaa2b0",
        "address": "0x0eB956bECD4342a500931b5e8Ce803a518113838",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d38de898df33fec5e0e4cce2a810db284c0cd820"
        ],
        "data": "0x",
        "logIndex": 181,
        "blockHash": "0x46485c0a28834af861f418e803974a83ffdb6c8f1e7792bb9447cf60d7fbd108"
      }
    ],
    "blockNumber": 7232380,
    "cumulativeGasUsed": "12797004",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD38de898Df33FEc5E0e4cCe2a810DB284C0Cd820"
  ],
  "numDeployments": 1,
  "solcInputHash": "d030c3f97a86c2bccb187bfde57580a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"}],\"name\":\"MarketRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReputation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReputation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"difficultyMultiplier\",\"type\":\"uint256\"}],\"name\":\"ReputationUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"}],\"name\":\"calculateDifficultyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateVotingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"predictions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"correct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"recordPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"outcome\",\"type\":\"bool\"}],\"name\":\"updateReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"whitelistFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedFactories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of reputation scoring and difficulty multiplier system\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"calculateDifficultyMultiplier(uint256,bool)\":{\"details\":\"Calculate difficulty multiplier based on price deviation\"},\"calculateFeeDiscount(address)\":{\"details\":\"Calculate fee discount based on reputation\"},\"calculateVotingWeight(address)\":{\"details\":\"Calculate voting weight based on reputation\"},\"getUserReputation(address)\":{\"details\":\"Get user's current reputation\"},\"getUserStats(address)\":{\"details\":\"Get user's complete stats\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recordPosition(address,address,uint256,bool,uint256)\":{\"details\":\"Records a user's position in a market\"},\"removeFactory(address)\":{\"details\":\"Remove a market factory from whitelist\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateReputation(address,address,bool)\":{\"details\":\"Updates user reputation after market resolution\"},\"whitelistFactory(address)\":{\"details\":\"Whitelist a market factory contract\"}},\"title\":\"ReputationSystem\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReputationSystem.sol\":\"ReputationSystem\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/ReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IReputationSystem.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title ReputationSystem\\n * @dev Implementation of reputation scoring and difficulty multiplier system\\n */\\ncontract ReputationSystem is IReputationSystem, Ownable, ReentrancyGuard {\\n    using Math for uint256;\\n\\n    uint256 private constant SCALE = 1e18;\\n    uint256 private constant BASE_REPUTATION_REWARD = 100 * SCALE;\\n    uint256 private constant MAX_DIFFICULTY_MULTIPLIER = 5 * SCALE;\\n    uint256 private constant MIN_DIFFICULTY_MULTIPLIER = SCALE;\\n    uint256 private constant MAX_DISCOUNT = 50 * SCALE / 100; // 50%\\n    uint256 private constant MAX_VOTING_WEIGHT = 3 * SCALE;   // 3x\\n    uint256 private constant REPUTATION_THRESHOLD = 1000000 * SCALE;\\n\\n    mapping(address => uint256) private userReputation;\\n    mapping(address => uint256) private totalPredictions;\\n    mapping(address => uint256) private correctPredictions;\\n    // Track consensus for each market\\n    mapping(address => MarketConsensus) private marketConsensus;\\n    // Whitelist of market factory contracts that can interact\\n    mapping(address => bool) public whitelistedFactories;\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n    \\n    // Market consensus tracking\\n    struct MarketConsensus {\\n        uint256 finalPrice;\\n        uint256 totalStaked;\\n        bool resolved;\\n        mapping(address => Position) userPositions;\\n    }\\n\\n    // Modifiers\\n    modifier onlyWhitelistedFactory() {\\n        require(whitelistedFactories[msg.sender], \\\"Not authorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Whitelist a market factory contract\\n     */\\n    function whitelistFactory(address factory) external onlyOwner {\\n        whitelistedFactories[factory] = true;\\n    }\\n\\n    /**\\n     * @dev Remove a market factory from whitelist\\n     */\\n    function removeFactory(address factory) external onlyOwner {\\n        whitelistedFactories[factory] = false;\\n    }\\n\\n    /**\\n     * @dev Records a user's position in a market\\n     */\\n    function recordPosition(\\n        address market,\\n        address user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 currentPrice\\n    ) external override onlyWhitelistedFactory {\\n        MarketConsensus storage consensus = marketConsensus[market];\\n        require(!consensus.resolved, \\\"Market already resolved\\\");\\n        \\n        Position storage position = consensus.userPositions[user];\\n        require(position.stake == 0, \\\"Position already recorded\\\");\\n        \\n        position.stake = stake;\\n        position.isYes = isYes;\\n        position.entryPrice = currentPrice;\\n        position.claimed = false;\\n        \\n        consensus.totalStaked += stake;\\n        \\n        emit MarketRecorded(market, user, stake, isYes, currentPrice);\\n    }\\n\\n    /**\\n     * @dev Calculate difficulty multiplier based on price deviation\\n     */\\n    function calculateDifficultyMultiplier(\\n        uint256 finalPrice,\\n        bool outcome\\n    ) public pure returns (uint256) {\\n        uint256 deviation;\\n        if (outcome) {\\n            // YES outcome\\n            deviation = SCALE - finalPrice;\\n        } else {\\n            // NO outcome\\n            deviation = finalPrice;\\n        }\\n        \\n        return MIN_DIFFICULTY_MULTIPLIER + \\n            (deviation * (MAX_DIFFICULTY_MULTIPLIER - MIN_DIFFICULTY_MULTIPLIER)) / SCALE;\\n    }\\n\\n    /**\\n     * @dev Updates user reputation after market resolution\\n     */\\n    function updateReputation(\\n        address market,\\n        address user,\\n        bool outcome\\n    ) external override onlyWhitelistedFactory nonReentrant returns (uint256) {\\n        MarketConsensus storage consensus = marketConsensus[market];\\n        require(!consensus.resolved, \\\"Already resolved\\\");\\n        \\n        Position storage position = consensus.userPositions[user];\\n        require(!position.claimed, \\\"Already claimed\\\");\\n        require(position.stake > 0, \\\"No position\\\");\\n        \\n        consensus.resolved = true;\\n        consensus.finalPrice = position.entryPrice;\\n        position.claimed = true;\\n        \\n        uint256 multiplier = calculateDifficultyMultiplier(\\n            consensus.finalPrice,\\n            outcome\\n        );\\n        \\n        totalPredictions[user]++;\\n        \\n        uint256 reputationChange = 0;\\n        if (position.isYes == outcome) {\\n            correctPredictions[user]++;\\n            \\n            uint256 stakeWeight = (position.stake * SCALE) / consensus.totalStaked;\\n            reputationChange = (BASE_REPUTATION_REWARD * multiplier * stakeWeight) / (SCALE * SCALE);\\n            \\n            uint256 oldReputation = userReputation[user];\\n            userReputation[user] += reputationChange;\\n            \\n            emit ReputationUpdated(\\n                user,\\n                oldReputation,\\n                userReputation[user],\\n                multiplier\\n            );\\n        }\\n        \\n        return reputationChange;\\n    }\\n\\n    /**\\n     * @dev Calculate fee discount based on reputation\\n     */\\n    function calculateFeeDiscount(\\n        address user\\n    ) external view override returns (uint256) {\\n        uint256 reputation = userReputation[user];\\n        \\n        if (reputation >= REPUTATION_THRESHOLD) {\\n            return MAX_DISCOUNT;\\n        }\\n        \\n        return (reputation * MAX_DISCOUNT) / REPUTATION_THRESHOLD;\\n    }\\n\\n    /**\\n     * @dev Calculate voting weight based on reputation\\n     */\\n    function calculateVotingWeight(\\n        address user\\n    ) external view override returns (uint256) {\\n        uint256 reputation = userReputation[user];\\n        \\n        if (reputation >= REPUTATION_THRESHOLD) {\\n            return MAX_VOTING_WEIGHT;\\n        }\\n        \\n        return SCALE + ((reputation * (MAX_VOTING_WEIGHT - SCALE)) / REPUTATION_THRESHOLD);\\n    }\\n\\n    /**\\n     * @dev Get user's current reputation\\n     */\\n    function getUserReputation(\\n        address user\\n    ) external view override returns (uint256) {\\n        return userReputation[user];\\n    }\\n\\n    /**\\n     * @dev Get user's complete stats\\n     */\\n    function getUserStats(\\n        address user\\n    ) external view override returns (\\n        uint256 reputation,\\n        uint256 predictions,\\n        uint256 correct\\n    ) {\\n        return (\\n            userReputation[user],\\n            totalPredictions[user],\\n            correctPredictions[user]\\n        );\\n    }\\n}\",\"keccak256\":\"0xddafade5dc6dcf36b0aae77d7bdf768e8f7e27908ab73b556ac8bdda31524b4c\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationSystem {\\n    struct Position {\\n        uint256 stake;\\n        bool isYes;\\n        uint256 entryPrice;\\n        bool claimed;\\n    }\\n\\n    event ReputationUpdated(\\n        address indexed user,\\n        uint256 oldReputation,\\n        uint256 newReputation,\\n        uint256 difficultyMultiplier\\n    );\\n\\n    event MarketRecorded(\\n        address indexed market,\\n        address indexed user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 entryPrice\\n    );\\n\\n    function whitelistFactory(address factory) external;\\n    \\n    function recordPosition(\\n        address market,\\n        address user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 currentPrice\\n    ) external;\\n\\n    function updateReputation(\\n        address market,\\n        address user,\\n        bool outcome\\n    ) external returns (uint256 reputationChange);\\n\\n    function calculateFeeDiscount(address user) external view returns (uint256);\\n    \\n    function calculateVotingWeight(address user) external view returns (uint256);\\n    \\n    function getUserReputation(address user) external view returns (uint256);\\n    \\n    function getUserStats(address user) external view returns (\\n        uint256 reputation,\\n        uint256 totalPredictions,\\n        uint256 correctPredictions\\n    );\\n}\",\"keccak256\":\"0x5fe9090f662eb0402b7289271fe7d760b4721cafefbcb70bab19cc84cdb4f838\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50604051610cb1380380610cb183398101604081905261002e916100bf565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b61006581610070565b5050600180556100ec565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100cf575f80fd5b81516001600160a01b03811681146100e5575f80fd5b9392505050565b610bb8806100f95f395ff3fe608060405234801561000f575f80fd5b50600436106100cb575f3560e01c806372be833811610088578063bdb1955111610063578063bdb1955114610206578063bdfaca9e14610219578063d21c36361461022c578063f2fde38b1461023f575f80fd5b806372be8338146101b15780638da5cb5b146101c4578063baccbfdb146101de575f80fd5b806330ad0c87146100cf578063317571b2146100e45780634b37c73f1461010a5780634e43603a1461011d5780636f50f2f414610177578063715018a6146101a9575b5f80fd5b6100e26100dd366004610a17565b610252565b005b6100f76100f2366004610a17565b61027d565b6040519081526020015b60405180910390f35b6100e2610118366004610a17565b610323565b61015c61012b366004610a17565b6001600160a01b03165f90815260026020908152604080832054600383528184205460049093529220549192909190565b60408051938452602084019290925290820152606001610101565b610199610185366004610a17565b60066020525f908152604090205460ff1681565b6040519015158152602001610101565b6100e261034b565b6100e26101bf366004610a3f565b61035e565b5f546040516001600160a01b039091168152602001610101565b6100f76101ec366004610a17565b6001600160a01b03165f9081526002602052604090205490565b6100f7610214366004610a17565b610523565b6100f7610227366004610a90565b6105b3565b6100f761023a366004610aba565b610626565b6100e261024d366004610a17565b61091a565b61025a610957565b6001600160a01b03165f908152600660205260409020805460ff19166001179055565b6001600160a01b0381165f908152600260205260408120546102aa670de0b6b3a7640000620f4240610b0e565b81106102ca576102c3670de0b6b3a76400006003610b0e565b9392505050565b6102df670de0b6b3a7640000620f4240610b0e565b670de0b6b3a76400006102f3816003610b0e565b6102fd9190610b25565b6103079083610b0e565b6103119190610b38565b6102c390670de0b6b3a7640000610b57565b61032b610957565b6001600160a01b03165f908152600660205260409020805460ff19169055565b610353610957565b61035c5f610983565b565b335f9081526006602052604090205460ff166103b25760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b6001600160a01b0385165f908152600560205260409020600281015460ff161561041e5760405162461bcd60e51b815260206004820152601760248201527f4d61726b657420616c7265616479207265736f6c76656400000000000000000060448201526064016103a9565b6001600160a01b0385165f90815260038201602052604090208054156104865760405162461bcd60e51b815260206004820152601960248201527f506f736974696f6e20616c7265616479207265636f726465640000000000000060448201526064016103a9565b8481556001808201805486151560ff1991821617909155600283018590556003830180549091169055820180548691905f906104c3908490610b57565b90915550506040805186815285151560208201529081018490526001600160a01b0380881691908916907f5438a1a31b52047e1c5949ed49392b25ce28119324465e32e922b586375478149060600160405180910390a350505050505050565b6001600160a01b0381165f90815260026020526040812054610550670de0b6b3a7640000620f4240610b0e565b811061057557606461056b670de0b6b3a76400006032610b0e565b6102c39190610b38565b61058a670de0b6b3a7640000620f4240610b0e565b606461059f670de0b6b3a76400006032610b0e565b6105a99190610b38565b61056b9083610b0e565b5f8082156105d4576105cd84670de0b6b3a7640000610b25565b90506105d7565b50825b670de0b6b3a7640000806105ec816005610b0e565b6105f69190610b25565b6106009083610b0e565b61060a9190610b38565b61061c90670de0b6b3a7640000610b57565b9150505b92915050565b335f9081526006602052604081205460ff166106755760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016103a9565b61067d6109d2565b6001600160a01b0384165f908152600560205260409020600281015460ff16156106dc5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b60448201526064016103a9565b6001600160a01b0384165f908152600380830160205260409091209081015460ff161561073d5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b60448201526064016103a9565b80546107795760405162461bcd60e51b815260206004820152600b60248201526a2737903837b9b4ba34b7b760a91b60448201526064016103a9565b60028281018054600160ff19918216811790925591830154845560038301805490921617905581545f906107ad90866105b3565b6001600160a01b0387165f9081526003602052604081208054929350906107d383610b6a565b909155505060018201545f9086151560ff90911615150361090c576001600160a01b0387165f90815260046020526040812080549161081183610b6a565b91905055505f8460010154670de0b6b3a7640000855f01546108339190610b0e565b61083d9190610b38565b9050610851670de0b6b3a764000080610b0e565b8184610866670de0b6b3a76400006064610b0e565b6108709190610b0e565b61087a9190610b0e565b6108849190610b38565b6001600160a01b0389165f908152600260205260408120805492945084916108ac8385610b57565b90915550506001600160a01b0389165f81815260026020908152604091829020548251858152918201529081018690527fc2fd17ad7e9f23b8607f0bd02d7a6cdcccd5a964fa99ce5a066ed34c5b4bb55b9060600160405180910390a250505b93505050506102c360018055565b610922610957565b6001600160a01b03811661094b57604051631e4fbdf760e01b81525f60048201526024016103a9565b61095481610983565b50565b5f546001600160a01b0316331461035c5760405163118cdaa760e01b81523360048201526024016103a9565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036109f557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b80356001600160a01b0381168114610a12575f80fd5b919050565b5f60208284031215610a27575f80fd5b6102c3826109fc565b80358015158114610a12575f80fd5b5f805f805f60a08688031215610a53575f80fd5b610a5c866109fc565b9450610a6a602087016109fc565b935060408601359250610a7f60608701610a30565b949793965091946080013592915050565b5f8060408385031215610aa1575f80fd5b82359150610ab160208401610a30565b90509250929050565b5f805f60608486031215610acc575f80fd5b610ad5846109fc565b9250610ae3602085016109fc565b9150610af160408501610a30565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761062057610620610afa565b8181038181111561062057610620610afa565b5f82610b5257634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561062057610620610afa565b5f60018201610b7b57610b7b610afa565b506001019056fea26469706673582212207359073ff91b823e5b4df13d95df78fce78fda894ab33567a553d7fa66138a8664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100cb575f3560e01c806372be833811610088578063bdb1955111610063578063bdb1955114610206578063bdfaca9e14610219578063d21c36361461022c578063f2fde38b1461023f575f80fd5b806372be8338146101b15780638da5cb5b146101c4578063baccbfdb146101de575f80fd5b806330ad0c87146100cf578063317571b2146100e45780634b37c73f1461010a5780634e43603a1461011d5780636f50f2f414610177578063715018a6146101a9575b5f80fd5b6100e26100dd366004610a17565b610252565b005b6100f76100f2366004610a17565b61027d565b6040519081526020015b60405180910390f35b6100e2610118366004610a17565b610323565b61015c61012b366004610a17565b6001600160a01b03165f90815260026020908152604080832054600383528184205460049093529220549192909190565b60408051938452602084019290925290820152606001610101565b610199610185366004610a17565b60066020525f908152604090205460ff1681565b6040519015158152602001610101565b6100e261034b565b6100e26101bf366004610a3f565b61035e565b5f546040516001600160a01b039091168152602001610101565b6100f76101ec366004610a17565b6001600160a01b03165f9081526002602052604090205490565b6100f7610214366004610a17565b610523565b6100f7610227366004610a90565b6105b3565b6100f761023a366004610aba565b610626565b6100e261024d366004610a17565b61091a565b61025a610957565b6001600160a01b03165f908152600660205260409020805460ff19166001179055565b6001600160a01b0381165f908152600260205260408120546102aa670de0b6b3a7640000620f4240610b0e565b81106102ca576102c3670de0b6b3a76400006003610b0e565b9392505050565b6102df670de0b6b3a7640000620f4240610b0e565b670de0b6b3a76400006102f3816003610b0e565b6102fd9190610b25565b6103079083610b0e565b6103119190610b38565b6102c390670de0b6b3a7640000610b57565b61032b610957565b6001600160a01b03165f908152600660205260409020805460ff19169055565b610353610957565b61035c5f610983565b565b335f9081526006602052604090205460ff166103b25760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b6001600160a01b0385165f908152600560205260409020600281015460ff161561041e5760405162461bcd60e51b815260206004820152601760248201527f4d61726b657420616c7265616479207265736f6c76656400000000000000000060448201526064016103a9565b6001600160a01b0385165f90815260038201602052604090208054156104865760405162461bcd60e51b815260206004820152601960248201527f506f736974696f6e20616c7265616479207265636f726465640000000000000060448201526064016103a9565b8481556001808201805486151560ff1991821617909155600283018590556003830180549091169055820180548691905f906104c3908490610b57565b90915550506040805186815285151560208201529081018490526001600160a01b0380881691908916907f5438a1a31b52047e1c5949ed49392b25ce28119324465e32e922b586375478149060600160405180910390a350505050505050565b6001600160a01b0381165f90815260026020526040812054610550670de0b6b3a7640000620f4240610b0e565b811061057557606461056b670de0b6b3a76400006032610b0e565b6102c39190610b38565b61058a670de0b6b3a7640000620f4240610b0e565b606461059f670de0b6b3a76400006032610b0e565b6105a99190610b38565b61056b9083610b0e565b5f8082156105d4576105cd84670de0b6b3a7640000610b25565b90506105d7565b50825b670de0b6b3a7640000806105ec816005610b0e565b6105f69190610b25565b6106009083610b0e565b61060a9190610b38565b61061c90670de0b6b3a7640000610b57565b9150505b92915050565b335f9081526006602052604081205460ff166106755760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016103a9565b61067d6109d2565b6001600160a01b0384165f908152600560205260409020600281015460ff16156106dc5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b60448201526064016103a9565b6001600160a01b0384165f908152600380830160205260409091209081015460ff161561073d5760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b60448201526064016103a9565b80546107795760405162461bcd60e51b815260206004820152600b60248201526a2737903837b9b4ba34b7b760a91b60448201526064016103a9565b60028281018054600160ff19918216811790925591830154845560038301805490921617905581545f906107ad90866105b3565b6001600160a01b0387165f9081526003602052604081208054929350906107d383610b6a565b909155505060018201545f9086151560ff90911615150361090c576001600160a01b0387165f90815260046020526040812080549161081183610b6a565b91905055505f8460010154670de0b6b3a7640000855f01546108339190610b0e565b61083d9190610b38565b9050610851670de0b6b3a764000080610b0e565b8184610866670de0b6b3a76400006064610b0e565b6108709190610b0e565b61087a9190610b0e565b6108849190610b38565b6001600160a01b0389165f908152600260205260408120805492945084916108ac8385610b57565b90915550506001600160a01b0389165f81815260026020908152604091829020548251858152918201529081018690527fc2fd17ad7e9f23b8607f0bd02d7a6cdcccd5a964fa99ce5a066ed34c5b4bb55b9060600160405180910390a250505b93505050506102c360018055565b610922610957565b6001600160a01b03811661094b57604051631e4fbdf760e01b81525f60048201526024016103a9565b61095481610983565b50565b5f546001600160a01b0316331461035c5760405163118cdaa760e01b81523360048201526024016103a9565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036109f557604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b80356001600160a01b0381168114610a12575f80fd5b919050565b5f60208284031215610a27575f80fd5b6102c3826109fc565b80358015158114610a12575f80fd5b5f805f805f60a08688031215610a53575f80fd5b610a5c866109fc565b9450610a6a602087016109fc565b935060408601359250610a7f60608701610a30565b949793965091946080013592915050565b5f8060408385031215610aa1575f80fd5b82359150610ab160208401610a30565b90509250929050565b5f805f60608486031215610acc575f80fd5b610ad5846109fc565b9250610ae3602085016109fc565b9150610af160408501610a30565b90509250925092565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761062057610620610afa565b8181038181111561062057610620610afa565b5f82610b5257634e487b7160e01b5f52601260045260245ffd5b500490565b8082018082111561062057610620610afa565b5f60018201610b7b57610b7b610afa565b506001019056fea26469706673582212207359073ff91b823e5b4df13d95df78fce78fda894ab33567a553d7fa66138a8664736f6c63430008140033",
  "devdoc": {
    "details": "Implementation of reputation scoring and difficulty multiplier system",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "calculateDifficultyMultiplier(uint256,bool)": {
        "details": "Calculate difficulty multiplier based on price deviation"
      },
      "calculateFeeDiscount(address)": {
        "details": "Calculate fee discount based on reputation"
      },
      "calculateVotingWeight(address)": {
        "details": "Calculate voting weight based on reputation"
      },
      "getUserReputation(address)": {
        "details": "Get user's current reputation"
      },
      "getUserStats(address)": {
        "details": "Get user's complete stats"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recordPosition(address,address,uint256,bool,uint256)": {
        "details": "Records a user's position in a market"
      },
      "removeFactory(address)": {
        "details": "Remove a market factory from whitelist"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateReputation(address,address,bool)": {
        "details": "Updates user reputation after market resolution"
      },
      "whitelistFactory(address)": {
        "details": "Whitelist a market factory contract"
      }
    },
    "title": "ReputationSystem",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 351,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2661,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "userReputation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2665,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "totalPredictions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2669,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "correctPredictions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2674,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "marketConsensus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(MarketConsensus)2699_storage)"
      },
      {
        "astId": 2678,
        "contract": "contracts/ReputationSystem.sol:ReputationSystem",
        "label": "whitelistedFactories",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(MarketConsensus)2699_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ReputationSystem.MarketConsensus)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketConsensus)2699_storage"
      },
      "t_mapping(t_address,t_struct(Position)3366_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IReputationSystem.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)3366_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MarketConsensus)2699_storage": {
        "encoding": "inplace",
        "label": "struct ReputationSystem.MarketConsensus",
        "members": [
          {
            "astId": 2689,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "finalPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2691,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "totalStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2693,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "resolved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2698,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "userPositions",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Position)3366_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Position)3366_storage": {
        "encoding": "inplace",
        "label": "struct IReputationSystem.Position",
        "members": [
          {
            "astId": 3359,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3361,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "isYes",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 3363,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "entryPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3365,
            "contract": "contracts/ReputationSystem.sol:ReputationSystem",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}