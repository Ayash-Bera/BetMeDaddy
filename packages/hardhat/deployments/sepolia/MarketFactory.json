{
  "address": "0x2c8B995398b4fAE0ABDB793C7DD87f227E76306d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReputationSystem",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketInitializationFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RangeOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldImpl",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldSystem",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSystem",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReputationSystemUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "result",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "isMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "marketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reputationSystem",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "name": "setReputationSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa926141d30bf2c75695210d89aae0d9f8ac3b4a1fcfa24f3de54d50208aefc5f",
  "receipt": {
    "to": null,
    "from": "0xD38de898Df33FEc5E0e4cCe2a810DB284C0Cd820",
    "contractAddress": "0x2c8B995398b4fAE0ABDB793C7DD87f227E76306d",
    "transactionIndex": 44,
    "gasUsed": "689620",
    "logsBloom": "0x00000000800000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000200000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000040000800000000000000000000000000000010000000000000",
    "blockHash": "0xaae23a38aa9717c907eb57fd5a0a7711cd06f10236b6060aaef230566d007891",
    "transactionHash": "0xa926141d30bf2c75695210d89aae0d9f8ac3b4a1fcfa24f3de54d50208aefc5f",
    "logs": [
      {
        "transactionIndex": 44,
        "blockNumber": 7232381,
        "transactionHash": "0xa926141d30bf2c75695210d89aae0d9f8ac3b4a1fcfa24f3de54d50208aefc5f",
        "address": "0x2c8B995398b4fAE0ABDB793C7DD87f227E76306d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d38de898df33fec5e0e4cce2a810db284c0cd820"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0xaae23a38aa9717c907eb57fd5a0a7711cd06f10236b6060aaef230566d007891"
      }
    ],
    "blockNumber": 7232381,
    "cumulativeGasUsed": "5342008",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD38de898Df33FEc5E0e4cCe2a810DB284C0Cd820",
    "0xbEd06D82FECe2977500688E38ba866aeBc39cBEA",
    "0x0eB956bECD4342a500931b5e8Ce803a518113838"
  ],
  "numDeployments": 1,
  "solcInputHash": "d030c3f97a86c2bccb187bfde57580a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReputationSystem\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketInitializationFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RangeOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSystem\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSystem\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReputationSystemUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"result\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"isMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationSystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"name\":\"setReputationSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract for creating and tracking prediction markets\",\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the implementation contract and reputation system\"},\"createMarket(string,uint256)\":{\"details\":\"Creates a new prediction market\"},\"getMarkets(uint256,uint256)\":{\"details\":\"Returns a list of markets within the given range\"},\"isMarket(address)\":{\"details\":\"Checks if an address is a market created by this factory\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setImplementation(address)\":{\"details\":\"Updates the implementation contract\"},\"setReputationSystem(address)\":{\"details\":\"Updates the reputation system contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MarketFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/MarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMarket.sol\\\";\\nimport \\\"./interfaces/IReputationSystem.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title MarketFactory\\n * @dev Factory contract for creating and tracking prediction markets\\n */\\ncontract MarketFactory is Ownable, ReentrancyGuard {\\n    using Clones for address;\\n\\n    // State variables\\n    address public implementation;\\n    address public reputationSystem;\\n    uint256 public marketCount;\\n    \\n    // Enhanced market tracking with more efficient storage\\n    mapping(uint256 => address) public marketById;\\n    mapping(address => uint256) public marketIds;\\n    \\n    // Events\\n    event ImplementationUpdated(\\n        address indexed oldImpl, \\n        address indexed newImpl,\\n        uint256 timestamp\\n    );\\n    \\n    event ReputationSystemUpdated(\\n        address indexed oldSystem,\\n        address indexed newSystem,\\n        uint256 timestamp\\n    );\\n    \\n    event MarketCreated(\\n        uint256 indexed marketId,\\n        address indexed market,\\n        string question,\\n        uint256 resolutionTime,\\n        address indexed creator,\\n        uint256 timestamp\\n    );\\n\\n    // Custom errors\\n    error InvalidImplementation();\\n    error InvalidReputationSystem();\\n    error InvalidRange();\\n    error RangeOutOfBounds();\\n    error MarketInitializationFailed();\\n\\n    /**\\n     * @dev Constructor sets the implementation contract and reputation system\\n     */\\n    constructor(\\n        address initialOwner,\\n        address _implementation, \\n        address _reputationSystem\\n    ) Ownable(initialOwner) {\\n        if (_implementation == address(0)) revert InvalidImplementation();\\n        if (_reputationSystem == address(0)) revert InvalidReputationSystem();\\n        \\n        implementation = _implementation;\\n        reputationSystem = _reputationSystem;\\n    }\\n\\n    /**\\n     * @dev Updates the implementation contract\\n     */\\n    function setImplementation(address _implementation) external onlyOwner {\\n        if (_implementation == address(0)) revert InvalidImplementation();\\n        \\n        address oldImpl = implementation;\\n        implementation = _implementation;\\n        \\n        emit ImplementationUpdated(\\n            oldImpl, \\n            _implementation,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Updates the reputation system contract\\n     */\\n    function setReputationSystem(address _reputationSystem) external onlyOwner {\\n        if (_reputationSystem == address(0)) revert InvalidReputationSystem();\\n        \\n        address oldSystem = reputationSystem;\\n        reputationSystem = _reputationSystem;\\n        \\n        emit ReputationSystemUpdated(\\n            oldSystem,\\n            _reputationSystem,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Creates a new prediction market\\n     */\\n    function createMarket(\\n        string calldata question,\\n        uint256 resolutionTime\\n    ) external nonReentrant returns (address market) {\\n        // Increment market count first to avoid reentrancy\\n        uint256 newMarketId = ++marketCount;\\n        \\n        // Clone the implementation contract\\n        market = implementation.clone();\\n        \\n        // Initialize the market with try-catch\\n        try IMarket(market).initialize(\\n            question,\\n            resolutionTime,\\n            msg.sender,\\n            reputationSystem\\n        ) {\\n            // Track the new market\\n            marketById[newMarketId] = market;\\n            marketIds[market] = newMarketId;\\n            \\n            // Whitelist the market in reputation system\\n            IReputationSystem(reputationSystem).whitelistFactory(address(this));\\n            \\n            emit MarketCreated(\\n                newMarketId,\\n                market,\\n                question,\\n                resolutionTime,\\n                msg.sender,\\n                block.timestamp\\n            );\\n            \\n            return market;\\n        } catch {\\n            revert MarketInitializationFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a list of markets within the given range\\n     */\\n    function getMarkets(uint256 start, uint256 end) \\n        external \\n        view \\n        returns (address[] memory result) \\n    {\\n        if (start >= end) revert InvalidRange();\\n        if (end > marketCount) revert RangeOutOfBounds();\\n        \\n        result = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            result[i - start] = marketById[i + 1];\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if an address is a market created by this factory\\n     */\\n    function isMarket(address market) external view returns (bool) {\\n        return marketIds[market] != 0;\\n    }\\n}\",\"keccak256\":\"0x28aa022d69ac5ca97ce29f03dfba2dd5f7d4181eccfa764ef493f9846b88f3e1\",\"license\":\"MIT\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IMarket\\n * @dev Interface for prediction market contracts\\n */\\ninterface IMarket {\\n    /// @dev Market outcome states\\n    enum MarketOutcome { UNRESOLVED, YES, NO, INVALID }\\n    \\n    /// @dev Market status states\\n    enum MarketStatus { TRADING, CLOSED, RESOLVED }\\n    \\n    /// @dev Emitted when market is created\\n    event MarketCreated(\\n        address indexed market,\\n        string question,\\n        uint256 resolutionTime,\\n        address indexed creator\\n    );\\n    \\n    /// @dev Emitted when a trade occurs\\n    event Trade(\\n        address indexed trader,\\n        bool isYes,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    \\n    /// @dev Emitted when market is resolved\\n    event MarketResolved(\\n        address indexed market,\\n        MarketOutcome outcome,\\n        address indexed resolver\\n    );\\n    \\n    /**\\n     * @dev Initializes a new market\\n     * @param _question Question being predicted\\n     * @param _resolutionTime Time when market can be resolved\\n     * @param _creator Address of market creator\\n     * @param _reputationSystem Address of reputation system contract\\n     */\\n    function initialize(\\n        string memory _question,\\n        uint256 _resolutionTime,\\n        address _creator,\\n        address _reputationSystem\\n    ) external;\\n    \\n    /**\\n     * @dev Buys outcome tokens\\n     * @param isYes True for YES tokens, false for NO tokens\\n     * @param amount Amount of collateral to spend\\n     * @return shares Amount of outcome tokens received\\n     */\\n    function buy(bool isYes, uint256 amount) external returns (uint256 shares);\\n    \\n    /**\\n     * @dev Sells outcome tokens\\n     * @param isYes True for YES tokens, false for NO tokens\\n     * @param shares Amount of outcome tokens to sell\\n     * @return amount Amount of collateral received\\n     */\\n    function sell(bool isYes, uint256 shares) external returns (uint256 amount);\\n    \\n    /**\\n     * @dev Resolves the market\\n     * @param outcome Final outcome of the market\\n     */\\n    function resolve(MarketOutcome outcome) external;\\n    \\n    /**\\n     * @dev Claims winnings after market resolution\\n     * @return amount Amount of collateral received\\n     */\\n    function claim() external returns (uint256 amount);\\n}\",\"keccak256\":\"0xabcb0cde2fd53685fdef6864fb2f9ad02db7122654b79b883d297accbf7d1721\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationSystem {\\n    struct Position {\\n        uint256 stake;\\n        bool isYes;\\n        uint256 entryPrice;\\n        bool claimed;\\n    }\\n\\n    event ReputationUpdated(\\n        address indexed user,\\n        uint256 oldReputation,\\n        uint256 newReputation,\\n        uint256 difficultyMultiplier\\n    );\\n\\n    event MarketRecorded(\\n        address indexed market,\\n        address indexed user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 entryPrice\\n    );\\n\\n    function whitelistFactory(address factory) external;\\n    \\n    function recordPosition(\\n        address market,\\n        address user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 currentPrice\\n    ) external;\\n\\n    function updateReputation(\\n        address market,\\n        address user,\\n        bool outcome\\n    ) external returns (uint256 reputationChange);\\n\\n    function calculateFeeDiscount(address user) external view returns (uint256);\\n    \\n    function calculateVotingWeight(address user) external view returns (uint256);\\n    \\n    function getUserReputation(address user) external view returns (uint256);\\n    \\n    function getUserStats(address user) external view returns (\\n        uint256 reputation,\\n        uint256 totalPredictions,\\n        uint256 correctPredictions\\n    );\\n}\",\"keccak256\":\"0x5fe9090f662eb0402b7289271fe7d760b4721cafefbcb70bab19cc84cdb4f838\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b50604051610b5b380380610b5b83398101604081905261002e91610154565b826001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b610065816100ea565b50600180556001600160a01b0382166100915760405163340aafcd60e11b815260040160405180910390fd5b6001600160a01b0381166100b857604051631568d0b360e01b815260040160405180910390fd5b600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905550610194565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461014f575f80fd5b919050565b5f805f60608486031215610166575f80fd5b61016f84610139565b925061017d60208501610139565b915061018b60408501610139565b90509250925092565b6109ba806101a15f395ff3fe608060405234801561000f575f80fd5b50600436106100cb575f3560e01c8063883c84c111610088578063d784d42611610063578063d784d426146101d4578063e090c76f146101e7578063ec97908214610214578063f2fde38b1461021d575f80fd5b8063883c84c1146101895780638da5cb5b1461019c578063bc37bf55146101ac575f80fd5b806331143cee146100cf5780635c60da1b146100e45780636587eda1146101145780636ec934da14610127578063715018a61461016157806380968d4814610169575b5f80fd5b6100e26100dd366004610762565b610230565b005b6002546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100f7906001600160a01b031681565b610151610135366004610762565b6001600160a01b03165f90815260066020526040902054151590565b604051901515815260200161010b565b6100e26102c1565b61017c610177366004610788565b6102d4565b60405161010b91906107a8565b6100f76101973660046107f4565b6103e4565b5f546001600160a01b03166100f7565b6100f76101ba366004610865565b60056020525f90815260409020546001600160a01b031681565b6100e26101e2366004610762565b610586565b6102066101f5366004610762565b60066020525f908152604090205481565b60405190815260200161010b565b61020660045481565b6100e261022b366004610762565b61060c565b61023861064e565b6001600160a01b03811661025f57604051631568d0b360e01b815260040160405180910390fd5b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ee879685b31024fd133fbeb7dbd515b086f657ee0482f3bafda6f8539d7d504906102b59042815260200190565b60405180910390a35050565b6102c961064e565b6102d25f61067a565b565b60608183106102f65760405163561ce9bb60e01b815260040160405180910390fd5b60045482111561031957604051630655dc2560e01b815260040160405180910390fd5b6103238383610890565b67ffffffffffffffff81111561033b5761033b6108a9565b604051908082528060200260200182016040528015610364578160200160208202803683370190505b509050825b828110156103dd5760055f61037f8360016108bd565b815260208101919091526040015f20546001600160a01b0316826103a38684610890565b815181106103b3576103b36108d0565b6001600160a01b0390921660209283029190910190910152806103d5816108e4565b915050610369565b5092915050565b5f6103ed6106c9565b5f60045f81546103fc906108e4565b9182905550600254909150610419906001600160a01b03166106f3565b60035460405163090100cd60e31b81529193506001600160a01b0380851692634808066892610455928a928a928a923392911690600401610924565b5f604051808303815f87803b15801561046c575f80fd5b505af192505050801561047d575060015b61049a576040516392bc453b60e01b815260040160405180910390fd5b5f81815260056020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255845260069092529182902083905560035491516330ad0c8760e01b81523060048201529116906330ad0c87906024015f604051808303815f87803b15801561050d575f80fd5b505af115801561051f573d5f803e3d5ffd5b50505050336001600160a01b0316826001600160a01b0316827f97e52d46208aa8a317eac3c54ca4e23a0f4e3f5cd9577333a8f063c40f97aec78888884260405161056d949392919061095e565b60405180910390a45061057f60018055565b9392505050565b61058e61064e565b6001600160a01b0381166105b55760405163340aafcd60e11b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fbe444e048be48a02d3602a86d2210c4cfd09be329f36642c342d033ef98a5009906102b59042815260200190565b61061461064e565b6001600160a01b03811661064257604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61064b8161067a565b50565b5f546001600160a01b031633146102d25760405163118cdaa760e01b8152336004820152602401610639565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036106ec57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c175f526e5af43d82803e903d91602b57fd5bf38260781b17602052603760095ff090506001600160a01b03811661075d576040516330be1a3d60e21b815260040160405180910390fd5b919050565b5f60208284031215610772575f80fd5b81356001600160a01b038116811461057f575f80fd5b5f8060408385031215610799575f80fd5b50508035926020909101359150565b602080825282518282018190525f9190848201906040850190845b818110156107e85783516001600160a01b0316835292840192918401916001016107c3565b50909695505050505050565b5f805f60408486031215610806575f80fd5b833567ffffffffffffffff8082111561081d575f80fd5b818601915086601f830112610830575f80fd5b81358181111561083e575f80fd5b87602082850101111561084f575f80fd5b6020928301989097509590910135949350505050565b5f60208284031215610875575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156108a3576108a361087c565b92915050565b634e487b7160e01b5f52604160045260245ffd5b808201808211156108a3576108a361087c565b634e487b7160e01b5f52603260045260245ffd5b5f600182016108f5576108f561087c565b5060010190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b608081525f6109376080830187896108fc565b6020830195909552506001600160a01b039283166040820152911660609091015292915050565b606081525f6109716060830186886108fc565b602083019490945250604001529291505056fea2646970667358221220dc9c02525d9cf121c637ae2dfdc2d2ca45785f66271110b1133c5cc631dbe39864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106100cb575f3560e01c8063883c84c111610088578063d784d42611610063578063d784d426146101d4578063e090c76f146101e7578063ec97908214610214578063f2fde38b1461021d575f80fd5b8063883c84c1146101895780638da5cb5b1461019c578063bc37bf55146101ac575f80fd5b806331143cee146100cf5780635c60da1b146100e45780636587eda1146101145780636ec934da14610127578063715018a61461016157806380968d4814610169575b5f80fd5b6100e26100dd366004610762565b610230565b005b6002546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100f7906001600160a01b031681565b610151610135366004610762565b6001600160a01b03165f90815260066020526040902054151590565b604051901515815260200161010b565b6100e26102c1565b61017c610177366004610788565b6102d4565b60405161010b91906107a8565b6100f76101973660046107f4565b6103e4565b5f546001600160a01b03166100f7565b6100f76101ba366004610865565b60056020525f90815260409020546001600160a01b031681565b6100e26101e2366004610762565b610586565b6102066101f5366004610762565b60066020525f908152604090205481565b60405190815260200161010b565b61020660045481565b6100e261022b366004610762565b61060c565b61023861064e565b6001600160a01b03811661025f57604051631568d0b360e01b815260040160405180910390fd5b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907ee879685b31024fd133fbeb7dbd515b086f657ee0482f3bafda6f8539d7d504906102b59042815260200190565b60405180910390a35050565b6102c961064e565b6102d25f61067a565b565b60608183106102f65760405163561ce9bb60e01b815260040160405180910390fd5b60045482111561031957604051630655dc2560e01b815260040160405180910390fd5b6103238383610890565b67ffffffffffffffff81111561033b5761033b6108a9565b604051908082528060200260200182016040528015610364578160200160208202803683370190505b509050825b828110156103dd5760055f61037f8360016108bd565b815260208101919091526040015f20546001600160a01b0316826103a38684610890565b815181106103b3576103b36108d0565b6001600160a01b0390921660209283029190910190910152806103d5816108e4565b915050610369565b5092915050565b5f6103ed6106c9565b5f60045f81546103fc906108e4565b9182905550600254909150610419906001600160a01b03166106f3565b60035460405163090100cd60e31b81529193506001600160a01b0380851692634808066892610455928a928a928a923392911690600401610924565b5f604051808303815f87803b15801561046c575f80fd5b505af192505050801561047d575060015b61049a576040516392bc453b60e01b815260040160405180910390fd5b5f81815260056020908152604080832080546001600160a01b0319166001600160a01b03878116918217909255845260069092529182902083905560035491516330ad0c8760e01b81523060048201529116906330ad0c87906024015f604051808303815f87803b15801561050d575f80fd5b505af115801561051f573d5f803e3d5ffd5b50505050336001600160a01b0316826001600160a01b0316827f97e52d46208aa8a317eac3c54ca4e23a0f4e3f5cd9577333a8f063c40f97aec78888884260405161056d949392919061095e565b60405180910390a45061057f60018055565b9392505050565b61058e61064e565b6001600160a01b0381166105b55760405163340aafcd60e11b815260040160405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fbe444e048be48a02d3602a86d2210c4cfd09be329f36642c342d033ef98a5009906102b59042815260200190565b61061461064e565b6001600160a01b03811661064257604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61064b8161067a565b50565b5f546001600160a01b031633146102d25760405163118cdaa760e01b8152336004820152602401610639565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036106ec57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c175f526e5af43d82803e903d91602b57fd5bf38260781b17602052603760095ff090506001600160a01b03811661075d576040516330be1a3d60e21b815260040160405180910390fd5b919050565b5f60208284031215610772575f80fd5b81356001600160a01b038116811461057f575f80fd5b5f8060408385031215610799575f80fd5b50508035926020909101359150565b602080825282518282018190525f9190848201906040850190845b818110156107e85783516001600160a01b0316835292840192918401916001016107c3565b50909695505050505050565b5f805f60408486031215610806575f80fd5b833567ffffffffffffffff8082111561081d575f80fd5b818601915086601f830112610830575f80fd5b81358181111561083e575f80fd5b87602082850101111561084f575f80fd5b6020928301989097509590910135949350505050565b5f60208284031215610875575f80fd5b5035919050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156108a3576108a361087c565b92915050565b634e487b7160e01b5f52604160045260245ffd5b808201808211156108a3576108a361087c565b634e487b7160e01b5f52603260045260245ffd5b5f600182016108f5576108f561087c565b5060010190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b608081525f6109376080830187896108fc565b6020830195909552506001600160a01b039283166040820152911660609091015292915050565b606081525f6109716060830186886108fc565b602083019490945250604001529291505056fea2646970667358221220dc9c02525d9cf121c637ae2dfdc2d2ca45785f66271110b1133c5cc631dbe39864736f6c63430008140033",
  "devdoc": {
    "details": "Factory contract for creating and tracking prediction markets",
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the implementation contract and reputation system"
      },
      "createMarket(string,uint256)": {
        "details": "Creates a new prediction market"
      },
      "getMarkets(uint256,uint256)": {
        "details": "Returns a list of markets within the given range"
      },
      "isMarket(address)": {
        "details": "Checks if an address is a market created by this factory"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setImplementation(address)": {
        "details": "Updates the implementation contract"
      },
      "setReputationSystem(address)": {
        "details": "Updates the reputation system contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MarketFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 351,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2293,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2295,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "reputationSystem",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2297,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "marketCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2301,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "marketById",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2305,
        "contract": "contracts/MarketFactory.sol:MarketFactory",
        "label": "marketIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}