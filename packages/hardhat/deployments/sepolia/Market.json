{
  "address": "0xbEd06D82FECe2977500688E38ba866aeBc39cBEA",
  "abi": [
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "question",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolutionTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IMarket.MarketOutcome",
          "name": "outcome",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "MarketResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isYes",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isYes",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "calculateEffectiveFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "enum IMarket.MarketStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "enum IMarket.MarketOutcome",
          "name": "_outcome",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityPool",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yesShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "noShares",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_question",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_resolutionTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationSystem",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "noBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outcome",
      "outputs": [
        {
          "internalType": "enum IMarket.MarketOutcome",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "question",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reputationSystem",
      "outputs": [
        {
          "internalType": "contract IReputationSystem",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolutionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IMarket.MarketOutcome",
          "name": "_outcome",
          "type": "uint8"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isYes",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum IMarket.MarketStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNoShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalYesShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yesBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb07b6621243f1d83b4e61b63437b4030d0a78c0a61aaaecea2fcecbb0431c8bf",
  "receipt": {
    "to": null,
    "from": "0xD38de898Df33FEc5E0e4cCe2a810DB284C0Cd820",
    "contractAddress": "0xbEd06D82FECe2977500688E38ba866aeBc39cBEA",
    "transactionIndex": 90,
    "gasUsed": "1483773",
    "logsBloom": "0x
    "blockHash": "0xcf2715033d8b644272989150bd4e99472d2a3a3652112810777871e2e0aac624",
    "transactionHash": "0xb07b6621243f1d83b4e61b63437b4030d0a78c0a61aaaecea2fcecbb0431c8bf",
    "logs": [],
    "blockNumber": 7232378,
    "cumulativeGasUsed": "22154892",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d030c3f97a86c2bccb187bfde57580a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolutionTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IMarket.MarketOutcome\",\"name\":\"outcome\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateEffectiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"enum IMarket.MarketStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarket.MarketOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yesShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_question\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_resolutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationSystem\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outcome\",\"outputs\":[{\"internalType\":\"enum IMarket.MarketOutcome\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reputationSystem\",\"outputs\":[{\"internalType\":\"contract IReputationSystem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IMarket.MarketOutcome\",\"name\":\"_outcome\",\"type\":\"uint8\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum IMarket.MarketStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNoShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalYesShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yesBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of a binary prediction market with reputation system\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"MarketCreated(address,string,uint256,address)\":{\"details\":\"Emitted when market is created\"},\"MarketResolved(address,uint8,address)\":{\"details\":\"Emitted when market is resolved\"},\"Trade(address,bool,uint256,uint256)\":{\"details\":\"Emitted when a trade occurs\"}},\"kind\":\"dev\",\"methods\":{\"buy(bool,uint256)\":{\"details\":\"Buys outcome tokens\"},\"calculateEffectiveFee(address)\":{\"details\":\"Calculates effective fee rate after reputation discount\"},\"claim()\":{\"details\":\"Claims winnings after market resolution\"},\"getCurrentPrice()\":{\"details\":\"Get current price of YES outcome\"},\"getMarketInfo()\":{\"details\":\"View functions for market information\"},\"getUserPosition(address)\":{\"details\":\"View function for user position\"},\"initialize(string,uint256,address,address)\":{\"details\":\"Initializes the market with given parameters\"},\"resolve(uint8)\":{\"details\":\"Resolves the market with final outcome\"},\"sell(bool,uint256)\":{\"details\":\"Sells outcome tokens\"}},\"title\":\"Market\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMarket.sol\\\";\\nimport \\\"./interfaces/IReputationSystem.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title Market\\n * @dev Implementation of a binary prediction market with reputation system\\n */\\ncontract Market is IMarket, ReentrancyGuard {\\n    using Math for uint256;\\n\\n    // Constants for price calculations\\n    uint256 private constant SCALE = 1e18;\\n    uint256 private constant MIN_PRICE = SCALE / 100; // 0.01\\n    uint256 private constant MAX_PRICE = 99 * SCALE / 100; // 0.99\\n    uint256 private constant BASE_FEE = 2 * SCALE / 100; // 2% base fee\\n\\n    // Market properties\\n    string public question;\\n    uint256 public resolutionTime;\\n    address public creator;\\n    IERC20 public collateralToken;\\n    MarketStatus public status;\\n    MarketOutcome public outcome;\\n    IReputationSystem public reputationSystem;\\n\\n    // Liquidity pool state\\n    uint256 public totalYesShares;\\n    uint256 public totalNoShares;\\n    uint256 public liquidityPool;\\n\\n    // User positions\\n    mapping(address => uint256) public yesBalances;\\n    mapping(address => uint256) public noBalances;\\n    \\n    // Claimed status tracking\\n    mapping(address => bool) public hasClaimed;\\n\\n    // Modifiers\\n    modifier onlyBeforeResolution() {\\n        require(block.timestamp < resolutionTime, \\\"Market: Too late\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterResolution() {\\n        require(block.timestamp >= resolutionTime, \\\"Market: Too early\\\");\\n        _;\\n    }\\n\\n    modifier onlyTrading() {\\n        require(status == MarketStatus.TRADING, \\\"Market: Not trading\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the market with given parameters\\n     */\\n    function initialize(\\n        string memory _question,\\n        uint256 _resolutionTime,\\n        address _creator,\\n        address _reputationSystem\\n    ) external override {\\n        require(bytes(question).length == 0, \\\"Already initialized\\\");\\n        require(_resolutionTime > block.timestamp, \\\"Invalid resolution time\\\");\\n        require(_reputationSystem != address(0), \\\"Invalid reputation system\\\");\\n        \\n        question = _question;\\n        resolutionTime = _resolutionTime;\\n        creator = _creator;\\n        status = MarketStatus.TRADING;\\n        reputationSystem = IReputationSystem(_reputationSystem);\\n        \\n        emit MarketCreated(address(this), _question, _resolutionTime, _creator);\\n    }\\n\\n    /**\\n     * @dev Calculates effective fee rate after reputation discount\\n     */\\n    function calculateEffectiveFee(address user) public view returns (uint256) {\\n        uint256 discount = reputationSystem.calculateFeeDiscount(user);\\n        return BASE_FEE - ((BASE_FEE * discount) / SCALE);\\n    }\\n\\n    /**\\n     * @dev Calculates the price for a given amount of shares\\n     */\\n    function calculatePrice(uint256 pool, uint256 shares) internal pure returns (uint256) {\\n        uint256 newPool = pool + shares;\\n        return (newPool * newPool - pool * pool) / (2 * SCALE);\\n    }\\n\\n    /**\\n     * @dev Get current price of YES outcome\\n     */\\n    function getCurrentPrice() public view returns (uint256) {\\n        uint256 totalLiquidity = totalYesShares + totalNoShares;\\n        if (totalLiquidity == 0) return SCALE / 2; // 50% if no liquidity\\n        return (totalYesShares * SCALE) / totalLiquidity;\\n    }\\n\\n    /**\\n     * @dev Buys outcome tokens\\n     */\\n    function buy(bool isYes, uint256 amount) \\n        external \\n        override \\n        onlyTrading \\n        onlyBeforeResolution \\n        nonReentrant \\n        returns (uint256)\\n    {\\n        require(amount > 0, \\\"Amount must be positive\\\");\\n        \\n        uint256 fee = (amount * calculateEffectiveFee(msg.sender)) / SCALE;\\n        uint256 effectiveAmount = amount - fee;\\n        \\n        uint256 shares;\\n        if (isYes) {\\n            shares = calculatePrice(totalYesShares, effectiveAmount);\\n            totalYesShares += shares;\\n            yesBalances[msg.sender] += shares;\\n        } else {\\n            shares = calculatePrice(totalNoShares, effectiveAmount);\\n            totalNoShares += shares;\\n            noBalances[msg.sender] += shares;\\n        }\\n        \\n        liquidityPool += effectiveAmount;\\n        require(collateralToken.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\n        \\n        // Record position for reputation\\n        reputationSystem.recordPosition(\\n            address(this),\\n            msg.sender,\\n            shares,\\n            isYes,\\n            getCurrentPrice()\\n        );\\n        \\n        emit Trade(msg.sender, isYes, amount, shares);\\n        return shares;\\n    }\\n\\n    /**\\n     * @dev Sells outcome tokens\\n     */\\n    function sell(bool isYes, uint256 shares)\\n        external\\n        override\\n        onlyTrading\\n        onlyBeforeResolution\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(shares > 0, \\\"Shares must be positive\\\");\\n        \\n        uint256 amount;\\n        if (isYes) {\\n            require(yesBalances[msg.sender] >= shares, \\\"Insufficient yes shares\\\");\\n            amount = calculatePrice(totalYesShares - shares, shares);\\n            totalYesShares -= shares;\\n            yesBalances[msg.sender] -= shares;\\n        } else {\\n            require(noBalances[msg.sender] >= shares, \\\"Insufficient no shares\\\");\\n            amount = calculatePrice(totalNoShares - shares, shares);\\n            totalNoShares -= shares;\\n            noBalances[msg.sender] -= shares;\\n        }\\n        \\n        uint256 fee = (amount * calculateEffectiveFee(msg.sender)) / SCALE;\\n        uint256 effectiveAmount = amount - fee;\\n        \\n        liquidityPool -= effectiveAmount;\\n        require(collateralToken.transfer(msg.sender, effectiveAmount), \\\"Transfer failed\\\");\\n        \\n        emit Trade(msg.sender, isYes, effectiveAmount, shares);\\n        return effectiveAmount;\\n    }\\n\\n    /**\\n     * @dev Resolves the market with final outcome\\n     */\\n    function resolve(MarketOutcome _outcome)\\n        external\\n        override\\n        onlyAfterResolution\\n        nonReentrant\\n    {\\n        require(status == MarketStatus.TRADING, \\\"Already resolved\\\");\\n        require(_outcome != MarketOutcome.UNRESOLVED, \\\"Invalid outcome\\\");\\n        \\n        // Calculate voting weight if resolver is not creator\\n        if (msg.sender != creator) {\\n            uint256 weight = reputationSystem.calculateVotingWeight(msg.sender);\\n            require(weight >= 2 * SCALE, \\\"Insufficient reputation to resolve\\\");\\n        }\\n        \\n        status = MarketStatus.RESOLVED;\\n        outcome = _outcome;\\n        \\n        emit MarketResolved(address(this), _outcome, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Claims winnings after market resolution\\n     */\\n    function claim()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        require(status == MarketStatus.RESOLVED, \\\"Not resolved\\\");\\n        require(!hasClaimed[msg.sender], \\\"Already claimed\\\");\\n        \\n        uint256 amount;\\n        bool isWinner;\\n        \\n        if (outcome == MarketOutcome.YES) {\\n            amount = yesBalances[msg.sender];\\n            isWinner = true;\\n        } else if (outcome == MarketOutcome.NO) {\\n            amount = noBalances[msg.sender];\\n            isWinner = true;\\n        } else if (outcome == MarketOutcome.INVALID) {\\n            // Return proportional amount of liquidity pool for invalid outcome\\n            uint256 totalShares = yesBalances[msg.sender] + noBalances[msg.sender];\\n            amount = (totalShares * liquidityPool) / (totalYesShares + totalNoShares);\\n        }\\n        \\n        if (amount > 0) {\\n            // Update reputation if it was a valid outcome\\n            if (isWinner) {\\n                reputationSystem.updateReputation(\\n                    address(this),\\n                    msg.sender,\\n                    outcome == MarketOutcome.YES\\n                );\\n            }\\n            \\n            // Reset balances and mark as claimed\\n            yesBalances[msg.sender] = 0;\\n            noBalances[msg.sender] = 0;\\n            hasClaimed[msg.sender] = true;\\n            \\n            require(collateralToken.transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n        }\\n        \\n        return amount;\\n    }\\n\\n    /**\\n     * @dev View functions for market information\\n     */\\n    function getMarketInfo() external view returns (\\n        string memory _question,\\n        uint256 _resolutionTime,\\n        address _creator,\\n        MarketStatus _status,\\n        MarketOutcome _outcome,\\n        uint256 _currentPrice,\\n        uint256 _liquidityPool\\n    ) {\\n        return (\\n            question,\\n            resolutionTime,\\n            creator,\\n            status,\\n            outcome,\\n            getCurrentPrice(),\\n            liquidityPool\\n        );\\n    }\\n\\n    /**\\n     * @dev View function for user position\\n     */\\n    function getUserPosition(address user) external view returns (\\n        uint256 yesShares,\\n        uint256 noShares,\\n        bool claimed\\n    ) {\\n        return (\\n            yesBalances[user],\\n            noBalances[user],\\n            hasClaimed[user]\\n        );\\n    }\\n}\",\"keccak256\":\"0xd5d1a6634d1fc7874a5bdd68ae06ecc657edfea19f1bb4fdeefeaa71101231e8\",\"license\":\"MIT\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IMarket\\n * @dev Interface for prediction market contracts\\n */\\ninterface IMarket {\\n    /// @dev Market outcome states\\n    enum MarketOutcome { UNRESOLVED, YES, NO, INVALID }\\n    \\n    /// @dev Market status states\\n    enum MarketStatus { TRADING, CLOSED, RESOLVED }\\n    \\n    /// @dev Emitted when market is created\\n    event MarketCreated(\\n        address indexed market,\\n        string question,\\n        uint256 resolutionTime,\\n        address indexed creator\\n    );\\n    \\n    /// @dev Emitted when a trade occurs\\n    event Trade(\\n        address indexed trader,\\n        bool isYes,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n    \\n    /// @dev Emitted when market is resolved\\n    event MarketResolved(\\n        address indexed market,\\n        MarketOutcome outcome,\\n        address indexed resolver\\n    );\\n    \\n    /**\\n     * @dev Initializes a new market\\n     * @param _question Question being predicted\\n     * @param _resolutionTime Time when market can be resolved\\n     * @param _creator Address of market creator\\n     * @param _reputationSystem Address of reputation system contract\\n     */\\n    function initialize(\\n        string memory _question,\\n        uint256 _resolutionTime,\\n        address _creator,\\n        address _reputationSystem\\n    ) external;\\n    \\n    /**\\n     * @dev Buys outcome tokens\\n     * @param isYes True for YES tokens, false for NO tokens\\n     * @param amount Amount of collateral to spend\\n     * @return shares Amount of outcome tokens received\\n     */\\n    function buy(bool isYes, uint256 amount) external returns (uint256 shares);\\n    \\n    /**\\n     * @dev Sells outcome tokens\\n     * @param isYes True for YES tokens, false for NO tokens\\n     * @param shares Amount of outcome tokens to sell\\n     * @return amount Amount of collateral received\\n     */\\n    function sell(bool isYes, uint256 shares) external returns (uint256 amount);\\n    \\n    /**\\n     * @dev Resolves the market\\n     * @param outcome Final outcome of the market\\n     */\\n    function resolve(MarketOutcome outcome) external;\\n    \\n    /**\\n     * @dev Claims winnings after market resolution\\n     * @return amount Amount of collateral received\\n     */\\n    function claim() external returns (uint256 amount);\\n}\",\"keccak256\":\"0xabcb0cde2fd53685fdef6864fb2f9ad02db7122654b79b883d297accbf7d1721\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReputationSystem {\\n    struct Position {\\n        uint256 stake;\\n        bool isYes;\\n        uint256 entryPrice;\\n        bool claimed;\\n    }\\n\\n    event ReputationUpdated(\\n        address indexed user,\\n        uint256 oldReputation,\\n        uint256 newReputation,\\n        uint256 difficultyMultiplier\\n    );\\n\\n    event MarketRecorded(\\n        address indexed market,\\n        address indexed user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 entryPrice\\n    );\\n\\n    function whitelistFactory(address factory) external;\\n    \\n    function recordPosition(\\n        address market,\\n        address user,\\n        uint256 stake,\\n        bool isYes,\\n        uint256 currentPrice\\n    ) external;\\n\\n    function updateReputation(\\n        address market,\\n        address user,\\n        bool outcome\\n    ) external returns (uint256 reputationChange);\\n\\n    function calculateFeeDiscount(address user) external view returns (uint256);\\n    \\n    function calculateVotingWeight(address user) external view returns (uint256);\\n    \\n    function getUserReputation(address user) external view returns (uint256);\\n    \\n    function getUserStats(address user) external view returns (\\n        uint256 reputation,\\n        uint256 totalPredictions,\\n        uint256 correctPredictions\\n    );\\n}\",\"keccak256\":\"0x5fe9090f662eb0402b7289271fe7d760b4721cafefbcb70bab19cc84cdb4f838\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b5060015f55611973806100215f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c8063665a11ca116100b4578063cd2013e211610079578063cd2013e21461031c578063d31dbc3e1461033b578063e24c469b14610344578063eb91d37e14610357578063f3e41e901461035f578063f571c5f314610368575f80fd5b8063665a11ca1461029c57806373b2e80e146102a5578063a0270dbc146102d7578063aa0e6bc4146102ea578063b2016bd414610309575f80fd5b80633fad9ae0116101055780633fad9ae0146101ef57806348080668146102045780634e71d92d146102195780635ae01f82146102215780635b7c2dad1461022a5780636587eda114610289575f80fd5b806302d05d3f1461014157806314d67ff314610171578063200d2ed21461019257806323341a05146101b357806327793f87146101ce575b5f80fd5b600354610154906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018461017f3660046114b6565b61037b565b604051908152602001610168565b6004546101a690600160a01b900460ff1681565b60405161016891906114f7565b6101bb610451565b6040516101689796959493929190611558565b6004546101e290600160a81b900460ff1681565b60405161016891906115b1565b6101f761053a565b60405161016891906115bf565b6102176102123660046115e5565b6105c6565b005b610184610751565b61018460075481565b61026c6102383660046114b6565b6001600160a01b03165f90815260096020908152604080832054600a835281842054600b9093529220549192909160ff1690565b604080519384526020840192909252151590820152606001610168565b600554610154906001600160a01b031681565b61018460085481565b6102c76102b33660046114b6565b600b6020525f908152604090205460ff1681565b6040519015158152602001610168565b6102176102e53660046116ba565b610a7e565b6101846102f83660046114b6565b600a6020525f908152604090205481565b600454610154906001600160a01b031681565b61018461032a3660046114b6565b60096020525f908152604090205481565b61018460065481565b6101846103523660046116e5565b610cef565b610184611051565b61018460025481565b6101846103763660046116e5565b6110a6565b60055460405163bdb1955160e01b81526001600160a01b0383811660048301525f92839291169063bdb1955190602401602060405180830381865afa1580156103c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ea919061170f565b9050670de0b6b3a764000081606461040383600261173a565b61040d9190611751565b610417919061173a565b6104219190611751565b6064610436670de0b6b3a7640000600261173a565b6104409190611751565b61044a9190611770565b9392505050565b6002546003546004546060925f928392839283928392839260019290916001600160a01b039091169060ff600160a01b8204811691600160a81b900416610496611051565b6008548680546104a590611783565b80601f01602080910402602001604051908101604052809291908181526020018280546104d190611783565b801561051c5780601f106104f35761010080835404028352916020019161051c565b820191905f5260205f20905b8154815290600101906020018083116104ff57829003601f168201915b50505050509650965096509650965096509650965090919293949596565b6001805461054790611783565b80601f016020809104026020016040519081016040528092919081815260200182805461057390611783565b80156105be5780601f10610595576101008083540402835291602001916105be565b820191905f5260205f20905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b600180546105d390611783565b15905061061d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b42831161066c5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736f6c7574696f6e2074696d650000000000000000006044820152606401610614565b6001600160a01b0381166106c25760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657075746174696f6e2073797374656d000000000000006044820152606401610614565b60016106ce8582611809565b506002839055600380546001600160a01b038481166001600160a01b031992831681179093556004805460ff60a01b19169055600580549185169190921617905560405130907fdb3e9457049e4110613a81c56f3d14a67299652bdd96120abf8ff4352942558f9061074390889088906118c5565b60405180910390a350505050565b5f61075a611422565b6002600454600160a01b900460ff16600281111561077a5761077a6114cf565b146107b65760405162461bcd60e51b815260206004820152600c60248201526b139bdd081c995cdbdb1d995960a21b6044820152606401610614565b335f908152600b602052604090205460ff16156108075760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610614565b5f806001600454600160a81b900460ff166003811115610829576108296114cf565b03610846575050335f9081526009602052604090205460016108f9565b6002600454600160a81b900460ff166003811115610866576108666114cf565b03610883575050335f908152600a602052604090205460016108f9565b6003600454600160a81b900460ff1660038111156108a3576108a36114cf565b036108f957335f908152600a602090815260408083205460099092528220546108cc91906118e6565b90506007546006546108de91906118e6565b6008546108eb908361173a565b6108f59190611751565b9250505b8115610a6f5780156109b0576005546001600160a01b031663d21c363630336001600454600160a81b900460ff166003811115610938576109386114cf565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401521460448201526064016020604051808303815f875af115801561098a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ae919061170f565b505b335f818152600960209081526040808320839055600a8252808320839055600b90915290819020805460ff1916600117905560048054915163a9059cbb60e01b815290810192909252602482018490526001600160a01b03169063a9059cbb906044016020604051808303815f875af1158015610a2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5391906118f9565b610a6f5760405162461bcd60e51b815260040161061490611914565b509050610a7b60015f55565b90565b600254421015610ac45760405162461bcd60e51b81526020600482015260116024820152704d61726b65743a20546f6f206561726c7960781b6044820152606401610614565b610acc611422565b5f600454600160a01b900460ff166002811115610aeb57610aeb6114cf565b14610b2b5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152606401610614565b5f816003811115610b3e57610b3e6114cf565b03610b7d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b6044820152606401610614565b6003546001600160a01b03163314610c6a576005546040516318bab8d960e11b81523360048201525f916001600160a01b03169063317571b290602401602060405180830381865afa158015610bd5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bf9919061170f565b9050610c0e670de0b6b3a7640000600261173a565b811015610c685760405162461bcd60e51b815260206004820152602260248201527f496e73756666696369656e742072657075746174696f6e20746f207265736f6c604482015261766560f01b6064820152608401610614565b505b60048054600160a11b60ff60a01b1982168117835583929161ffff60a01b191617600160a81b836003811115610ca257610ca26114cf565b0217905550604051339030907f6eac92bd581619721e4b87f544af10f8e67c264bc3db337f6db4651ea1048c7090610cdb9085906115b1565b60405180910390a3610cec60015f55565b50565b5f80600454600160a01b900460ff166002811115610d0f57610d0f6114cf565b14610d525760405162461bcd60e51b81526020600482015260136024820152724d61726b65743a204e6f742074726164696e6760681b6044820152606401610614565b6002544210610d965760405162461bcd60e51b815260206004820152601060248201526f4d61726b65743a20546f6f206c61746560801b6044820152606401610614565b610d9e611422565b5f8211610ded5760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610614565b5f670de0b6b3a7640000610e003361037b565b610e0a908561173a565b610e149190611751565b90505f610e218285611770565b90505f8515610e7757610e366006548361144a565b90508060065f828254610e4991906118e6565b9091555050335f9081526009602052604081208054839290610e6c9084906118e6565b90915550610ebf9050565b610e836007548361144a565b90508060075f828254610e9691906118e6565b9091555050335f908152600a602052604081208054839290610eb99084906118e6565b90915550505b8160085f828254610ed091906118e6565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018790526001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610f2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4e91906118f9565b610f6a5760405162461bcd60e51b815260040161061490611914565b6005546001600160a01b03166372be83383033848a610f87611051565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152604484019190915215156064830152608482015260a4015f604051808303815f87803b158015610fe2575f80fd5b505af1158015610ff4573d5f803e3d5ffd5b5050604080518915158152602081018990529081018490523392507ff6462a0afa0880720a9b8317f39324757851bd340a51fe6fb4e94374975358e091506060015b60405180910390a29250505061104b60015f55565b92915050565b5f8060075460065461106391906118e6565b9050805f036110855761107f6002670de0b6b3a7640000611751565b91505090565b80670de0b6b3a764000060065461109c919061173a565b61107f9190611751565b5f80600454600160a01b900460ff1660028111156110c6576110c66114cf565b146111095760405162461bcd60e51b81526020600482015260136024820152724d61726b65743a204e6f742074726164696e6760681b6044820152606401610614565b600254421061114d5760405162461bcd60e51b815260206004820152601060248201526f4d61726b65743a20546f6f206c61746560801b6044820152606401610614565b611155611422565b5f82116111a45760405162461bcd60e51b815260206004820152601760248201527f536861726573206d75737420626520706f7369746976650000000000000000006044820152606401610614565b5f831561126157335f908152600960205260409020548311156112095760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420796573207368617265730000000000000000006044820152606401610614565b6112208360065461121a9190611770565b8461144a565b90508260065f8282546112339190611770565b9091555050335f9081526009602052604081208054859290611256908490611770565b909155506113059050565b335f908152600a60205260409020548311156112b85760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206e6f2073686172657360501b6044820152606401610614565b6112c98360075461121a9190611770565b90508260075f8282546112dc9190611770565b9091555050335f908152600a6020526040812080548592906112ff908490611770565b90915550505b5f670de0b6b3a76400006113183361037b565b611322908461173a565b61132c9190611751565b90505f6113398284611770565b90508060085f82825461134c9190611770565b90915550506004805460405163a9059cbb60e01b81523392810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303815f875af11580156113a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c491906118f9565b6113e05760405162461bcd60e51b815260040161061490611914565b6040805187151581526020810183905290810186905233907ff6462a0afa0880720a9b8317f39324757851bd340a51fe6fb4e94374975358e090606001611036565b60025f540361144457604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f8061145683856118e6565b905061146b670de0b6b3a7640000600261173a565b611475858061173a565b61147f838061173a565b6114899190611770565b6114939190611751565b949350505050565b80356001600160a01b03811681146114b1575f80fd5b919050565b5f602082840312156114c6575f80fd5b61044a8261149b565b634e487b7160e01b5f52602160045260245ffd5b600381106114f3576114f36114cf565b9052565b6020810161104b82846114e3565b5f81518084525f5b818110156115295760208185018101518683018201520161150d565b505f602082860101526020601f19601f83011685010191505092915050565b600481106114f3576114f36114cf565b60e081525f61156a60e083018a611505565b602083018990526001600160a01b0388166040840152905061158f60608301876114e3565b61159c6080830186611548565b60a082019390935260c0015295945050505050565b6020810161104b8284611548565b602081525f61044a6020830184611505565b634e487b7160e01b5f52604160045260245ffd5b5f805f80608085870312156115f8575f80fd5b843567ffffffffffffffff8082111561160f575f80fd5b818701915087601f830112611622575f80fd5b813581811115611634576116346115d1565b604051601f8201601f19908116603f0116810190838211818310171561165c5761165c6115d1565b816040528281528a6020848701011115611674575f80fd5b826020860160208301375f602084830101528098505050505050602085013592506116a16040860161149b565b91506116af6060860161149b565b905092959194509250565b5f602082840312156116ca575f80fd5b81356004811061044a575f80fd5b8015158114610cec575f80fd5b5f80604083850312156116f6575f80fd5b8235611701816116d8565b946020939093013593505050565b5f6020828403121561171f575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761104b5761104b611726565b5f8261176b57634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561104b5761104b611726565b600181811c9082168061179757607f821691505b6020821081036117b557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115611804575f81815260208120601f850160051c810160208610156117e15750805b601f850160051c820191505b81811015611800578281556001016117ed565b5050505b505050565b815167ffffffffffffffff811115611823576118236115d1565b611837816118318454611783565b846117bb565b602080601f83116001811461186a575f84156118535750858301515b5f19600386901b1c1916600185901b178555611800565b5f85815260208120601f198616915b8281101561189857888601518255948401946001909101908401611879565b50858210156118b557878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b604081525f6118d76040830185611505565b90508260208301529392505050565b8082018082111561104b5761104b611726565b5f60208284031215611909575f80fd5b815161044a816116d8565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b60408201526060019056fea26469706673582212200cc18193c9453436846625914fa649f0f0e109655a1546221326fd27c4443b8a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b506004361061013d575f3560e01c8063665a11ca116100b4578063cd2013e211610079578063cd2013e21461031c578063d31dbc3e1461033b578063e24c469b14610344578063eb91d37e14610357578063f3e41e901461035f578063f571c5f314610368575f80fd5b8063665a11ca1461029c57806373b2e80e146102a5578063a0270dbc146102d7578063aa0e6bc4146102ea578063b2016bd414610309575f80fd5b80633fad9ae0116101055780633fad9ae0146101ef57806348080668146102045780634e71d92d146102195780635ae01f82146102215780635b7c2dad1461022a5780636587eda114610289575f80fd5b806302d05d3f1461014157806314d67ff314610171578063200d2ed21461019257806323341a05146101b357806327793f87146101ce575b5f80fd5b600354610154906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61018461017f3660046114b6565b61037b565b604051908152602001610168565b6004546101a690600160a01b900460ff1681565b60405161016891906114f7565b6101bb610451565b6040516101689796959493929190611558565b6004546101e290600160a81b900460ff1681565b60405161016891906115b1565b6101f761053a565b60405161016891906115bf565b6102176102123660046115e5565b6105c6565b005b610184610751565b61018460075481565b61026c6102383660046114b6565b6001600160a01b03165f90815260096020908152604080832054600a835281842054600b9093529220549192909160ff1690565b604080519384526020840192909252151590820152606001610168565b600554610154906001600160a01b031681565b61018460085481565b6102c76102b33660046114b6565b600b6020525f908152604090205460ff1681565b6040519015158152602001610168565b6102176102e53660046116ba565b610a7e565b6101846102f83660046114b6565b600a6020525f908152604090205481565b600454610154906001600160a01b031681565b61018461032a3660046114b6565b60096020525f908152604090205481565b61018460065481565b6101846103523660046116e5565b610cef565b610184611051565b61018460025481565b6101846103763660046116e5565b6110a6565b60055460405163bdb1955160e01b81526001600160a01b0383811660048301525f92839291169063bdb1955190602401602060405180830381865afa1580156103c6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ea919061170f565b9050670de0b6b3a764000081606461040383600261173a565b61040d9190611751565b610417919061173a565b6104219190611751565b6064610436670de0b6b3a7640000600261173a565b6104409190611751565b61044a9190611770565b9392505050565b6002546003546004546060925f928392839283928392839260019290916001600160a01b039091169060ff600160a01b8204811691600160a81b900416610496611051565b6008548680546104a590611783565b80601f01602080910402602001604051908101604052809291908181526020018280546104d190611783565b801561051c5780601f106104f35761010080835404028352916020019161051c565b820191905f5260205f20905b8154815290600101906020018083116104ff57829003601f168201915b50505050509650965096509650965096509650965090919293949596565b6001805461054790611783565b80601f016020809104026020016040519081016040528092919081815260200182805461057390611783565b80156105be5780601f10610595576101008083540402835291602001916105be565b820191905f5260205f20905b8154815290600101906020018083116105a157829003601f168201915b505050505081565b600180546105d390611783565b15905061061d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064015b60405180910390fd5b42831161066c5760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207265736f6c7574696f6e2074696d650000000000000000006044820152606401610614565b6001600160a01b0381166106c25760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642072657075746174696f6e2073797374656d000000000000006044820152606401610614565b60016106ce8582611809565b506002839055600380546001600160a01b038481166001600160a01b031992831681179093556004805460ff60a01b19169055600580549185169190921617905560405130907fdb3e9457049e4110613a81c56f3d14a67299652bdd96120abf8ff4352942558f9061074390889088906118c5565b60405180910390a350505050565b5f61075a611422565b6002600454600160a01b900460ff16600281111561077a5761077a6114cf565b146107b65760405162461bcd60e51b815260206004820152600c60248201526b139bdd081c995cdbdb1d995960a21b6044820152606401610614565b335f908152600b602052604090205460ff16156108075760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b6044820152606401610614565b5f806001600454600160a81b900460ff166003811115610829576108296114cf565b03610846575050335f9081526009602052604090205460016108f9565b6002600454600160a81b900460ff166003811115610866576108666114cf565b03610883575050335f908152600a602052604090205460016108f9565b6003600454600160a81b900460ff1660038111156108a3576108a36114cf565b036108f957335f908152600a602090815260408083205460099092528220546108cc91906118e6565b90506007546006546108de91906118e6565b6008546108eb908361173a565b6108f59190611751565b9250505b8115610a6f5780156109b0576005546001600160a01b031663d21c363630336001600454600160a81b900460ff166003811115610938576109386114cf565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401521460448201526064016020604051808303815f875af115801561098a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ae919061170f565b505b335f818152600960209081526040808320839055600a8252808320839055600b90915290819020805460ff1916600117905560048054915163a9059cbb60e01b815290810192909252602482018490526001600160a01b03169063a9059cbb906044016020604051808303815f875af1158015610a2f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5391906118f9565b610a6f5760405162461bcd60e51b815260040161061490611914565b509050610a7b60015f55565b90565b600254421015610ac45760405162461bcd60e51b81526020600482015260116024820152704d61726b65743a20546f6f206561726c7960781b6044820152606401610614565b610acc611422565b5f600454600160a01b900460ff166002811115610aeb57610aeb6114cf565b14610b2b5760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481c995cdbdb1d995960821b6044820152606401610614565b5f816003811115610b3e57610b3e6114cf565b03610b7d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206f7574636f6d6560881b6044820152606401610614565b6003546001600160a01b03163314610c6a576005546040516318bab8d960e11b81523360048201525f916001600160a01b03169063317571b290602401602060405180830381865afa158015610bd5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bf9919061170f565b9050610c0e670de0b6b3a7640000600261173a565b811015610c685760405162461bcd60e51b815260206004820152602260248201527f496e73756666696369656e742072657075746174696f6e20746f207265736f6c604482015261766560f01b6064820152608401610614565b505b60048054600160a11b60ff60a01b1982168117835583929161ffff60a01b191617600160a81b836003811115610ca257610ca26114cf565b0217905550604051339030907f6eac92bd581619721e4b87f544af10f8e67c264bc3db337f6db4651ea1048c7090610cdb9085906115b1565b60405180910390a3610cec60015f55565b50565b5f80600454600160a01b900460ff166002811115610d0f57610d0f6114cf565b14610d525760405162461bcd60e51b81526020600482015260136024820152724d61726b65743a204e6f742074726164696e6760681b6044820152606401610614565b6002544210610d965760405162461bcd60e51b815260206004820152601060248201526f4d61726b65743a20546f6f206c61746560801b6044820152606401610614565b610d9e611422565b5f8211610ded5760405162461bcd60e51b815260206004820152601760248201527f416d6f756e74206d75737420626520706f7369746976650000000000000000006044820152606401610614565b5f670de0b6b3a7640000610e003361037b565b610e0a908561173a565b610e149190611751565b90505f610e218285611770565b90505f8515610e7757610e366006548361144a565b90508060065f828254610e4991906118e6565b9091555050335f9081526009602052604081208054839290610e6c9084906118e6565b90915550610ebf9050565b610e836007548361144a565b90508060075f828254610e9691906118e6565b9091555050335f908152600a602052604081208054839290610eb99084906118e6565b90915550505b8160085f828254610ed091906118e6565b9091555050600480546040516323b872dd60e01b81523392810192909252306024830152604482018790526001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610f2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f4e91906118f9565b610f6a5760405162461bcd60e51b815260040161061490611914565b6005546001600160a01b03166372be83383033848a610f87611051565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152604484019190915215156064830152608482015260a4015f604051808303815f87803b158015610fe2575f80fd5b505af1158015610ff4573d5f803e3d5ffd5b5050604080518915158152602081018990529081018490523392507ff6462a0afa0880720a9b8317f39324757851bd340a51fe6fb4e94374975358e091506060015b60405180910390a29250505061104b60015f55565b92915050565b5f8060075460065461106391906118e6565b9050805f036110855761107f6002670de0b6b3a7640000611751565b91505090565b80670de0b6b3a764000060065461109c919061173a565b61107f9190611751565b5f80600454600160a01b900460ff1660028111156110c6576110c66114cf565b146111095760405162461bcd60e51b81526020600482015260136024820152724d61726b65743a204e6f742074726164696e6760681b6044820152606401610614565b600254421061114d5760405162461bcd60e51b815260206004820152601060248201526f4d61726b65743a20546f6f206c61746560801b6044820152606401610614565b611155611422565b5f82116111a45760405162461bcd60e51b815260206004820152601760248201527f536861726573206d75737420626520706f7369746976650000000000000000006044820152606401610614565b5f831561126157335f908152600960205260409020548311156112095760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420796573207368617265730000000000000000006044820152606401610614565b6112208360065461121a9190611770565b8461144a565b90508260065f8282546112339190611770565b9091555050335f9081526009602052604081208054859290611256908490611770565b909155506113059050565b335f908152600a60205260409020548311156112b85760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206e6f2073686172657360501b6044820152606401610614565b6112c98360075461121a9190611770565b90508260075f8282546112dc9190611770565b9091555050335f908152600a6020526040812080548592906112ff908490611770565b90915550505b5f670de0b6b3a76400006113183361037b565b611322908461173a565b61132c9190611751565b90505f6113398284611770565b90508060085f82825461134c9190611770565b90915550506004805460405163a9059cbb60e01b81523392810192909252602482018390526001600160a01b03169063a9059cbb906044016020604051808303815f875af11580156113a0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c491906118f9565b6113e05760405162461bcd60e51b815260040161061490611914565b6040805187151581526020810183905290810186905233907ff6462a0afa0880720a9b8317f39324757851bd340a51fe6fb4e94374975358e090606001611036565b60025f540361144457604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f8061145683856118e6565b905061146b670de0b6b3a7640000600261173a565b611475858061173a565b61147f838061173a565b6114899190611770565b6114939190611751565b949350505050565b80356001600160a01b03811681146114b1575f80fd5b919050565b5f602082840312156114c6575f80fd5b61044a8261149b565b634e487b7160e01b5f52602160045260245ffd5b600381106114f3576114f36114cf565b9052565b6020810161104b82846114e3565b5f81518084525f5b818110156115295760208185018101518683018201520161150d565b505f602082860101526020601f19601f83011685010191505092915050565b600481106114f3576114f36114cf565b60e081525f61156a60e083018a611505565b602083018990526001600160a01b0388166040840152905061158f60608301876114e3565b61159c6080830186611548565b60a082019390935260c0015295945050505050565b6020810161104b8284611548565b602081525f61044a6020830184611505565b634e487b7160e01b5f52604160045260245ffd5b5f805f80608085870312156115f8575f80fd5b843567ffffffffffffffff8082111561160f575f80fd5b818701915087601f830112611622575f80fd5b813581811115611634576116346115d1565b604051601f8201601f19908116603f0116810190838211818310171561165c5761165c6115d1565b816040528281528a6020848701011115611674575f80fd5b826020860160208301375f602084830101528098505050505050602085013592506116a16040860161149b565b91506116af6060860161149b565b905092959194509250565b5f602082840312156116ca575f80fd5b81356004811061044a575f80fd5b8015158114610cec575f80fd5b5f80604083850312156116f6575f80fd5b8235611701816116d8565b946020939093013593505050565b5f6020828403121561171f575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808202811582820484141761104b5761104b611726565b5f8261176b57634e487b7160e01b5f52601260045260245ffd5b500490565b8181038181111561104b5761104b611726565b600181811c9082168061179757607f821691505b6020821081036117b557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115611804575f81815260208120601f850160051c810160208610156117e15750805b601f850160051c820191505b81811015611800578281556001016117ed565b5050505b505050565b815167ffffffffffffffff811115611823576118236115d1565b611837816118318454611783565b846117bb565b602080601f83116001811461186a575f84156118535750858301515b5f19600386901b1c1916600185901b178555611800565b5f85815260208120601f198616915b8281101561189857888601518255948401946001909101908401611879565b50858210156118b557878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b604081525f6118d76040830185611505565b90508260208301529392505050565b8082018082111561104b5761104b611726565b5f60208284031215611909575f80fd5b815161044a816116d8565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b60408201526060019056fea26469706673582212200cc18193c9453436846625914fa649f0f0e109655a1546221326fd27c4443b8a64736f6c63430008140033",
  "devdoc": {
    "details": "Implementation of a binary prediction market with reputation system",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "MarketCreated(address,string,uint256,address)": {
        "details": "Emitted when market is created"
      },
      "MarketResolved(address,uint8,address)": {
        "details": "Emitted when market is resolved"
      },
      "Trade(address,bool,uint256,uint256)": {
        "details": "Emitted when a trade occurs"
      }
    },
    "kind": "dev",
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buys outcome tokens"
      },
      "calculateEffectiveFee(address)": {
        "details": "Calculates effective fee rate after reputation discount"
      },
      "claim()": {
        "details": "Claims winnings after market resolution"
      },
      "getCurrentPrice()": {
        "details": "Get current price of YES outcome"
      },
      "getMarketInfo()": {
        "details": "View functions for market information"
      },
      "getUserPosition(address)": {
        "details": "View function for user position"
      },
      "initialize(string,uint256,address,address)": {
        "details": "Initializes the market with given parameters"
      },
      "resolve(uint8)": {
        "details": "Resolves the market with final outcome"
      },
      "sell(bool,uint256)": {
        "details": "Sells outcome tokens"
      }
    },
    "title": "Market",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 351,
        "contract": "contracts/Market.sol:Market",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1502,
        "contract": "contracts/Market.sol:Market",
        "label": "question",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1504,
        "contract": "contracts/Market.sol:Market",
        "label": "resolutionTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1506,
        "contract": "contracts/Market.sol:Market",
        "label": "creator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1509,
        "contract": "contracts/Market.sol:Market",
        "label": "collateralToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)310"
      },
      {
        "astId": 1512,
        "contract": "contracts/Market.sol:Market",
        "label": "status",
        "offset": 20,
        "slot": "4",
        "type": "t_enum(MarketStatus)3277"
      },
      {
        "astId": 1515,
        "contract": "contracts/Market.sol:Market",
        "label": "outcome",
        "offset": 21,
        "slot": "4",
        "type": "t_enum(MarketOutcome)3272"
      },
      {
        "astId": 1518,
        "contract": "contracts/Market.sol:Market",
        "label": "reputationSystem",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IReputationSystem)3450"
      },
      {
        "astId": 1520,
        "contract": "contracts/Market.sol:Market",
        "label": "totalYesShares",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1522,
        "contract": "contracts/Market.sol:Market",
        "label": "totalNoShares",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1524,
        "contract": "contracts/Market.sol:Market",
        "label": "liquidityPool",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1528,
        "contract": "contracts/Market.sol:Market",
        "label": "yesBalances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1532,
        "contract": "contracts/Market.sol:Market",
        "label": "noBalances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1536,
        "contract": "contracts/Market.sol:Market",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)310": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IReputationSystem)3450": {
        "encoding": "inplace",
        "label": "contract IReputationSystem",
        "numberOfBytes": "20"
      },
      "t_enum(MarketOutcome)3272": {
        "encoding": "inplace",
        "label": "enum IMarket.MarketOutcome",
        "numberOfBytes": "1"
      },
      "t_enum(MarketStatus)3277": {
        "encoding": "inplace",
        "label": "enum IMarket.MarketStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}